From c13ee0e80cc50ef01931e26bb616f76b391b01a2 Mon Sep 17 00:00:00 2001
From: Tim Stahlhut <stahta01@gmail.com>
Date: Thu, 2 Jun 2022 15:26:39 -0400
Subject: remove code second time

---
 common/bitmap.cpp | 38 --------------------------------------
 1 file changed, 38 deletions(-)

diff --git a/common/bitmap.cpp b/common/bitmap.cpp
index 6b6401ad0f..6ca4c10d14 100644
--- a/common/bitmap.cpp
+++ b/common/bitmap.cpp
@@ -49,44 +49,6 @@
 
 static std::unique_ptr<BITMAP_STORE> s_BitmapStore;
 
-
-struct SCALED_BITMAP_ID {
-    BITMAPS bitmap;
-    int scale;
-
-    bool operator==( SCALED_BITMAP_ID const& other ) const noexcept
-    {
-        return bitmap == other.bitmap && scale == other.scale;
-    }
-};
-
-
-namespace std {
-    template<> struct hash<SCALED_BITMAP_ID>
-    {
-        typedef SCALED_BITMAP_ID argument_type;
-        typedef std::size_t result_type;
-
-        result_type operator()( argument_type const& id ) const noexcept
-        {
-            static const bool sz64 = sizeof( uintptr_t ) == 8;
-            static const size_t mask = sz64 ? 0xF000000000000000uLL : 0xF0000000uL;
-            static const size_t offset = sz64 ? 60 : 28;
-
-            // The hash only needs to be fast and simple, not necessarily accurate - a collision
-            // only makes things slower, not broken. BITMAPS is a pointer, so the most
-            // significant several bits are generally going to be the same for all. Just convert
-            // it to an integer and stuff the scale factor into those bits.
-            return
-                ( (uintptr_t)( id.bitmap ) & ~mask ) |
-                ( ( (uintptr_t)( id.scale ) & 0xF ) << offset );
-        }
-    };
-}
-
-
-static std::unordered_map<SCALED_BITMAP_ID, wxBitmap> s_ScaledBitmapCache;
-
 static std::mutex s_BitmapCacheMutex;
 
 
-- 
2.36.1.windows.1

