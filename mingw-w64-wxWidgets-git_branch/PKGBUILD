####
#
# Based on packages found at these URLs
#     https://www.archlinux.org/packages/extra/i686/wxgtk-common/
#     https://github.com/Alexpux/MINGW-packages/tree/master/mingw-w64-wxWidgets
#
# Maintainer: Tim Stahlhut <stahta01@gmail.com>
#
####

# Normal 64 bit build command
#   MINGW_ARCH=mingw64 makepkg-mingw -sLf --nocheck --install

_basename=wxWidgets
_sourcedir=${_basename}-git
_wx_basever=3.0
_namesuffix="-git"
pkgbase=mingw-w64-${_basename}-git_branch
pkgdesc="A C++ library that lets developers create applications for Windows, Linux and UNIX (mingw-w64)"
_build_nocompat28=no      # Set to no for normal build
_build_msw=yes            # Set to yes for normal build
_build_ANSI=no            # Set to no for normal build
_build_gtk3=no            # Set to no for normal build

pkgname=(
  ${MINGW_PACKAGE_PREFIX}-wxconfig${_namesuffix}
  $([[ "$_build_msw" == "yes" ]]  && echo "${MINGW_PACKAGE_PREFIX}-wxmsw${_wx_basever}${_namesuffix}")
  $([[ "$_build_ANSI" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-wxmsw${_wx_basever}-ANSI${_namesuffix}")
  $([[ "$_build_nocompat28" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-wxmsw${_wx_basever}-no28${_namesuffix}")
  $([[ "$_build_gtk3" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-wxgtk${_wx_basever}-gtk3${_namesuffix}")
)
pkgver=3.0.6.0.v+13.c9.gc034a78f63
pkgrel=1
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
license=("custom:wxWindows")
url="https://www.wxwidgets.org/"
#options=('!strip' 'staticlibs' 'buildflags' 'debug')
#options=('strip' 'staticlibs' 'buildflags' '!debug')
options=('!strip' 'staticlibs' 'buildflags' '!debug')
makedepends=(
  "diffutils"
  "git"
  "make"
  $([[ "$_build_gtk3" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-pkg-config")
  $([[ "$_build_gtk3" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-gtk3")
  "${MINGW_PACKAGE_PREFIX}-libpng"
  "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
  "${MINGW_PACKAGE_PREFIX}-libtiff"
)
checkdepends=("${MINGW_PACKAGE_PREFIX}-cppunit")
source=(
  ${_sourcedir}::"git+https://github.com/wxWidgets/wxWidgets.git#branch=WX_3_0_BRANCH"

  # MSys2 only patch
  001-wxWidgets-3.0.2-relocate-prefix-in-bin-wx-config.patch

  # Trying to see if ArchLinux patch works
  "002-wxWidgets-3.0.3-make-abicheck-non-fatal.patch"

  # backported patches from wxWidgets repo.
  003-wxWidgets-3.0.2-fix-access-sample.patch
  004-wxWidgets-3.0-clang-windows-link.patch
  011-wxWidgets-3.0.4-add-GDK_WINDOWING_WIN32-guards.patch
  012-wxWidgets-3.0.4-Configure-changes-needed-for-wxGTK-win32.patch
  008-wxWidgets-3.0.3-Changed-value-of-resource-macros.patch
  009-wxWidgets-3.0.4-Only-change-wxUSE_CHECKLISTBOX-to-0-when-MSW-toolkit.patch
  010-wxWidgets-3.0.3-Added-wxUSE_WXDIB-guard-to-Toolbar-sample.patch

# Patches rejected by wxWidgets team
  031-wxWidgets-3.0.4-Add-deprecated-wxWidgets-1.xx-compatibility-message.patch
  # Remove runtime macro used by apps to link against wxWidgets
  # The WX_LIBS_STATIC macro is very old and deprecated
  # The macro does not work correctly under MSys2
  # Possible shell scripting compatibilty issue
  005-wxWidgets-3.0.2-Remove-WX_LIBS_STATIC-from-m4.patch
)

sha256sums=('SKIP'
            'ca0c2ddbf34654589c79dc859adf8fd9bf20388789bb098c7456cfe81b3ea805'
            '8e1eb9d6a13c7c52ffaec6093e40d1f3c397a220fd881274ce3ef54fc39525d9'
            'edd5f72e6ee36d7687ce242ca7561f54f934542f0541dea0564b470aa9fd61e5'
            'b8b49b1df4a7c53d72c7c117606ac9dc44589da474ca58f0806b107469f33dcb'
            '2402876275cd77463d8d1d8f60525c0d335b7a02a1d5eea6437938b7ab0ed91f'
            'a8f6742dc9760ca8b11f5b4e8f7dc2aa3f5645fae8dd6a18f6e5e983f3ef3413'
            '031a78586989c4c0d3c6b10d522d66c1d1a4f24dedca82886a0f4743e62c3f0b'
            '4dc50c848f9fe6e37ced83eaa384d2cc227186732a67db7f461306105df6ad7e'
            '7aa39f4cd943e3f7ffc0e2c8e87f70f70ed7a49c89ccc3b658e6daa2ace9e189'
            '07c269b3b6ca863b03eed1f1115012005adf468dd3fcef3a3a8764a00d689da9'
            '2483e7f13e5312199c01c64f999aaf9ca28661c3bc46f10043e6dd42d63ab272')

# Declare global variables; begin with underscore to avoid name conflicts
_git_base_commit=

pkgver() {
  cd ${srcdir}/${_sourcedir}
  local _major=$(head -n 34 include/wx/version.h | grep 'wxMAJOR_VERSION' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  local _minor1=$(head -n 34 include/wx/version.h | grep 'wxMINOR_VERSION' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  local _minor2=$(head -n 34 include/wx/version.h | grep 'wxRELEASE_NUMBER' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  local _minor3=$(head -n 34 include/wx/version.h | grep 'wxSUBRELEASE_NUMBER' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  printf "%s.%s.%s.%s.v+%s.c%s.g%s" "$_major" "$_minor1" "$_minor2" "$_minor3" $(git rev-list --count $(git rev-list -1 ${_git_base_commit} include/wx/version.h)..${_git_base_commit}) $(git rev-list --count ${_git_base_commit}..HEAD) $(git rev-parse --short ${_git_base_commit})
}

prepare() {
  cd "${srcdir}/${_sourcedir}"

  _git_base_commit=$(git rev-parse HEAD)
  GIT_AM="git am --committer-date-is-author-date"

  # Fix Run-Time wx-config bug: MSys2 Mingw only patch; Do not try to submit upstream
  ${GIT_AM} ${srcdir}/001-wxWidgets-3.0.2-relocate-prefix-in-bin-wx-config.patch

  # Trying to see if ArchLinux patch works
  # patch -p1 -i ${srcdir}/002-wxWidgets-3.0.3-make-abicheck-non-fatal.patch

  # Backport Fixes adapted from Git Master
  ${GIT_AM} "${srcdir}"/003-wxWidgets-3.0.2-fix-access-sample.patch
  ${GIT_AM} "${srcdir}"/004-wxWidgets-3.0-clang-windows-link.patch
  ${GIT_AM} "${srcdir}"/010-wxWidgets-3.0.3-Added-wxUSE_WXDIB-guard-to-Toolbar-sample.patch
  ${GIT_AM} "${srcdir}"/011-wxWidgets-3.0.4-add-GDK_WINDOWING_WIN32-guards.patch

  # New patch files
  ${GIT_AM} "${srcdir}"/012-wxWidgets-3.0.4-Configure-changes-needed-for-wxGTK-win32.patch
  ${GIT_AM} "${srcdir}"/008-wxWidgets-3.0.3-Changed-value-of-resource-macros.patch
  ${GIT_AM} "${srcdir}"/009-wxWidgets-3.0.4-Only-change-wxUSE_CHECKLISTBOX-to-0-when-MSW-toolkit.patch

  # Client code related changes; WX_LIBS_STATIC is not working under MSys2's Mingw
  # This patch has all ready been rejected by the wxWidgets upstream people.
  ${GIT_AM} "${srcdir}"/005-wxWidgets-3.0.2-Remove-WX_LIBS_STATIC-from-m4.patch

#  ${GIT_AM} "${srcdir}"/031-wxWidgets-3.0.4-Add-deprecated-wxWidgets-1.xx-compatibility-message.patch
}

build() {
  ####
  # Configure options added to support other software:
  #   --enable-graphics_ctx     codelite
  #
  # Configure options added to check for build issues
  #   --disable-precomp-headers
  #
  # Configure options added to avoid warnings:
  #   --with-regex=builtin
  #
  # Configure options added to avoid errors in wxGTK builds:
  #   --disable-webview
  #   --disable-mediactrl
  #   --without-opengl
  #
  # Configure options known to cause build errors:
  #   --disable-regkey                                compile error
  #
  # Configure options believed to reduce code size or build time:
  #   --without-subdirs
  #
  ####

case ${MINGW_CHOST} in
  i686*)
    _march=i686
  ;;
  x86_64*)
    _march=x86-64
  ;;
esac

if check_option "buildflags" "y"; then
# Remove the -O and -ggdb options to avoid configuration warnings
# from the normal settings found in /etc/makepkg_mingw??.conf

CXXFLAGS=${CXXFLAGS/-Og }
CXXFLAGS=${CXXFLAGS/-O2 }
CXXFLAGS=${CXXFLAGS/-ggdb }

CFLAGS=${CFLAGS/-Og }
CFLAGS=${CFLAGS/-O2 }
CFLAGS=${CFLAGS/-ggdb }
fi

local -a _debug_options=()

if check_option "debug" "y"; then
    # Tried to see if Code::Blocks crash report was improved
    # It was not improved; it was slightly worse
    #CXXFLAGS+=" -fasynchronous-unwind-tables"
    _debug_options+=("--enable-debug_gdb")
    _debug_options+=("--enable-debug_info")
    _debug_options+=("--enable-debug=max")
else
    _debug_options+=("--enable-optimise")
    _debug_options+=("--enable-debug=yes")
fi

echo "CFLAGS := ${CFLAGS}"
echo "CXXFLAGS := ${CXXFLAGS}"
echo "_debug_options := ${_debug_options[@]}"

if [[ "$_build_gtk3" == "yes" ]] ; then
  [[ -d "${srcdir}"/build-gtk3-${CARCH}-static ]] && rm -rf "${srcdir}"/build-gtk3-${CARCH}-static
  mkdir -p "${srcdir}"/build-gtk3-${CARCH}-static && cd "${srcdir}"/build-gtk3-${CARCH}-static

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-gtk=3 \
    --with-libpng=builtin \
    --with-libjpeg=builtin \
    --with-libtiff=builtin \
    --with-zlib=builtin \
    --with-expat=builtin \
    --with-regex=builtin \
    --enable-static \
    --disable-shared \
    --enable-textfile \
    --enable-iff \
    --disable-permissive \
    --enable-unicode \
    --enable-graphics_ctx \
    --enable-regkey \
    --disable-mediactrl \
    --disable-webview \
    --without-gtkprint \
    --disable-precomp-headers \
    "${_debug_options[@]}" \
    --without-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-gtk3-${CARCH}-static ]] && rm -rf "${srcdir}"/install-gtk3-${CARCH}-static
  make DESTDIR="${srcdir}"/install-gtk3-${CARCH}-static install

  [[ -d "${srcdir}"/build-gtk3-${CARCH} ]] && rm -rf "${srcdir}"/build-gtk3-${CARCH}
  mkdir -p "${srcdir}"/build-gtk3-${CARCH} && cd "${srcdir}"/build-gtk3-${CARCH}

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-gtk=3 \
    --with-regex=builtin \
    --with-libpng=sys \
    --with-libjpeg=sys \
    --with-libtiff=sys \
    --enable-shared \
    --enable-textfile \
    --enable-iff \
    --disable-permissive \
    --enable-unicode \
    --enable-graphics_ctx \
    --enable-regkey \
    --disable-mediactrl \
    --disable-webview \
    --without-gtkprint \
    "${_debug_options[@]}" \
    --without-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-gtk3-${CARCH} ]] && rm -rf "${srcdir}"/install-gtk3-${CARCH}
  make DESTDIR="${srcdir}"/install-gtk3-${CARCH} install
fi

if [[ "$_build_msw" == "yes" ]] ; then
  [[ -d "${srcdir}"/build-msw-${CARCH} ]] && rm -rf "${srcdir}"/build-msw-${CARCH}
  mkdir -p "${srcdir}"/build-msw-${CARCH} && cd "${srcdir}"/build-msw-${CARCH}

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-msw \
    --with-regex=builtin \
    --with-libpng=sys \
    --with-libjpeg=sys \
    --with-libtiff=sys \
    --enable-shared \
    --enable-iff \
    --disable-permissive \
    --enable-unicode \
    --enable-graphics_ctx \
    --enable-accessibility \
    --disable-monolithic \
    --disable-mslu \
    "${_debug_options[@]}" \
    --with-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-msw-${CARCH} ]] && rm -rf "${srcdir}"/install-msw-${CARCH}
  make DESTDIR="${srcdir}"/install-msw-${CARCH} install

  [[ -d "${srcdir}"/build-msw-${CARCH}-static ]] && rm -rf "${srcdir}"/build-msw-${CARCH}-static
  mkdir -p "${srcdir}"/build-msw-${CARCH}-static && cd "${srcdir}"/build-msw-${CARCH}-static

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-msw \
    --with-libpng=builtin \
    --with-libjpeg=builtin \
    --with-libtiff=builtin \
    --with-zlib=builtin \
    --with-expat=builtin \
    --with-regex=builtin \
    --enable-static \
    --disable-shared \
    --enable-iff \
    --disable-permissive \
    --enable-unicode \
    --enable-graphics_ctx \
    --enable-accessibility \
    --disable-monolithic \
    --disable-mslu \
    --disable-precomp-headers \
    "${_debug_options[@]}" \
    --with-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-msw-${CARCH}-static ]] && rm -rf "${srcdir}"/install-msw-${CARCH}-static
  make DESTDIR="${srcdir}"/install-msw-${CARCH}-static install
fi

if [[ "$_build_ANSI" == "yes" ]] ; then
  [[ -d "${srcdir}"/build-msw-${CARCH}-ANSI-static ]] && rm -rf "${srcdir}"/build-msw-${CARCH}-ANSI-static
  mkdir -p "${srcdir}"/build-msw-${CARCH}-ANSI-static && cd "${srcdir}"/build-msw-${CARCH}-ANSI-static

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-msw \
    --with-libpng=builtin \
    --with-libjpeg=builtin \
    --with-libtiff=builtin \
    --with-zlib=builtin \
    --with-expat=builtin \
    --with-regex=builtin \
    --enable-compat26 \
    --enable-static \
    --disable-shared \
    --enable-iff \
    --disable-permissive \
    --enable-graphics_ctx \
    --enable-accessibility \
    --disable-unicode \
    --disable-monolithic \
    --disable-mslu \
    --disable-precomp-headers \
    "${_debug_options[@]}" \
    --with-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-msw-${CARCH}-ANSI-static ]] && rm -rf "${srcdir}"/install-msw-${CARCH}-ANSI-static
  make DESTDIR="${srcdir}"/install-msw-${CARCH}-ANSI-static install

  [[ -d "${srcdir}"/build-msw-${CARCH}-ANSI ]] && rm -rf "${srcdir}"/build-msw-${CARCH}-ANSI
  mkdir -p "${srcdir}"/build-msw-${CARCH}-ANSI && cd "${srcdir}"/build-msw-${CARCH}-ANSI

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-msw \
    --with-regex=builtin \
    --with-libpng=sys \
    --with-libjpeg=sys \
    --with-libtiff=sys \
    --enable-compat26 \
    --disable-static \
    --enable-shared \
    --enable-iff \
    --disable-permissive \
    --enable-graphics_ctx \
    --enable-accessibility \
    --disable-unicode \
    --disable-monolithic \
    --disable-mslu \
    "${_debug_options[@]}" \
    --with-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-msw-${CARCH}-ANSI ]] && rm -rf "${srcdir}"/install-msw-${CARCH}-ANSI
  make DESTDIR="${srcdir}"/install-msw-${CARCH}-ANSI install
fi

if [[ "$_build_nocompat28" == "yes" ]] ; then
  [[ -d "${srcdir}"/build-no28-${CARCH} ]] && rm -rf "${srcdir}"/build-no28-${CARCH}
  mkdir -p "${srcdir}"/build-no28-${CARCH} && cd "${srcdir}"/build-no28-${CARCH}

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-msw \
    --with-regex=builtin \
    --with-libpng=sys \
    --with-libjpeg=sys \
    --with-libtiff=sys \
    --disable-compat28 \
    --enable-shared \
    --enable-iff \
    --disable-permissive \
    --enable-unicode \
    --enable-graphics_ctx \
    --enable-accessibility \
    --disable-monolithic \
    --disable-mslu \
    "${_debug_options[@]}" \
    --with-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-no28-${CARCH} ]] && rm -rf "${srcdir}"/install-no28-${CARCH}
  make DESTDIR="${srcdir}"/install-no28-${CARCH} install

  [[ -d "${srcdir}"/build-no28-${CARCH}-static ]] && rm -rf "${srcdir}"/build-no28-${CARCH}-static
  mkdir -p "${srcdir}"/build-no28-${CARCH}-static && cd "${srcdir}"/build-no28-${CARCH}-static

  CFLAGS="$CFLAGS" \
  CXXFLAGS="$CXXFLAGS" \
  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --with-msw \
    --with-libpng=builtin \
    --with-libjpeg=builtin \
    --with-libtiff=builtin \
    --with-zlib=builtin \
    --with-expat=builtin \
    --with-regex=builtin \
    --disable-compat28 \
    --enable-static \
    --disable-shared \
    --enable-iff \
    --disable-permissive \
    --enable-unicode \
    --enable-graphics_ctx \
    --enable-accessibility \
    --disable-monolithic \
    --disable-mslu \
    --disable-precomp-headers \
    "${_debug_options[@]}" \
    --with-opengl

  make #VERBOSE=1

  [[ -d "${srcdir}"/install-no28-${CARCH}-static ]] && rm -rf "${srcdir}"/install-no28-${CARCH}-static
  make DESTDIR="${srcdir}"/install-no28-${CARCH}-static install
fi
}

check() {
  if [[ "$_build_msw" == "yes" ]] ; then
    cd "${srcdir}"/build-msw-${CARCH}/demos && make -k || true

    cd "${srcdir}"/build-msw-${CARCH}/samples && make -k || true

    cd "${srcdir}"/build-msw-${CARCH}/tests && make -k || true
  fi
  if [[ "$_build_ANSI" == "yes" ]] ; then
    cd "${srcdir}"/build-msw-${CARCH}-ANSI/samples && make -k || true

    cd "${srcdir}"/build-msw-${CARCH}-ANSI/tests && make -k || true
  fi
    if [[ "$_build_nocompat28" == "yes" ]] ; then
    cd "${srcdir}"/build-no28-${CARCH}/samples && make -k || true

    cd "${srcdir}"/build-no28-${CARCH}/tests && make -k || true
  fi
  if [[ "$_build_gtk3" == "yes" ]] ; then
    cd "${srcdir}"/build-gtk3-${CARCH}/samples && make -k || true

    cd "${srcdir}"/build-gtk3-${CARCH}/tests && make -k || true
  fi
}

_package_wxconfig() {
  pkgdesc="config script for wxWidgets library (mingw-w64)"
  groups=("${MINGW_PACKAGE_PREFIX}-wxWidgets")
  provides=("${MINGW_PACKAGE_PREFIX}-wxconfig")
  conflicts=("${MINGW_PACKAGE_PREFIX}-wxconfig")
  mkdir -p ${pkgdir}${MINGW_PREFIX}/bin
  if [[ "$_build_msw" == "yes" ]] ; then
    cp ${srcdir}/install-msw-${CARCH}${MINGW_PREFIX}/bin/wx-config ${pkgdir}${MINGW_PREFIX}/bin/wx-config
  elif [[ "$_build_nocompat28" == "yes" ]] ; then
    cp ${srcdir}/install-no28-${CARCH}${MINGW_PREFIX}/bin/wx-config ${pkgdir}${MINGW_PREFIX}/bin/wx-config
  elif [[ "$_build_ANSI" == "yes" ]] ; then
    cp ${srcdir}/install-msw-${CARCH}-ANSI${MINGW_PREFIX}/bin/wx-config ${pkgdir}${MINGW_PREFIX}/bin/wx-config
  elif [[ "$_build_gtk3" == "yes" ]] ; then
    cp ${srcdir}/install-gtk3-${CARCH}${MINGW_PREFIX}/bin/wx-config ${pkgdir}${MINGW_PREFIX}/bin/wx-config
  fi
}

_package_wxmsw() {
  pkgdesc="A C++ library that lets developers create applications for Windows, Linux and UNIX (mingw-w64)"
  groups=("${MINGW_PACKAGE_PREFIX}-wxWidgets")
  conflicts=("${MINGW_PACKAGE_PREFIX}-wxWidgets" "${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}" ${MINGW_PACKAGE_PREFIX}-wxmsw${_wx_basever} )
  provides=("${MINGW_PACKAGE_PREFIX}-wxWidgets" "${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}"  ${MINGW_PACKAGE_PREFIX}-wxmsw${_wx_basever} )
  provides+=("${MINGW_PACKAGE_PREFIX}-wxconfig${_wx_basever}")
  conflicts+=("${MINGW_PACKAGE_PREFIX}-wxconfig${_wx_basever}")
  depends=(
    "${MINGW_PACKAGE_PREFIX}-gcc-libs"
    "${MINGW_PACKAGE_PREFIX}-expat"
    "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
    "${MINGW_PACKAGE_PREFIX}-libpng"
    "${MINGW_PACKAGE_PREFIX}-libtiff"
    "${MINGW_PACKAGE_PREFIX}-xz"
    "${MINGW_PACKAGE_PREFIX}-zlib"
  )

  mkdir -p ${pkgdir}${MINGW_PREFIX}
  cp --recursive "${srcdir}"/install-msw-${CARCH}-static/${MINGW_PREFIX}/ ${pkgdir}/
  cp --recursive "${srcdir}"/install-msw-${CARCH}/${MINGW_PREFIX}/ ${pkgdir}/

  mv ${pkgdir}${MINGW_PREFIX}/lib/*.dll ${pkgdir}${MINGW_PREFIX}/bin

  # Add missing exe file extension (Likely bug in wxWidgets makefile)
  mv ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever} ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever}.exe

  # create wx-config copy with version file suffix
  cp ${pkgdir}${MINGW_PREFIX}/bin/wx-config{,-${_wx_basever}}

  # Remove files
  rm -fr ${pkgdir}${MINGW_PREFIX}/bin/wx-config

  # License files
  cd "${srcdir}"/${_sourcedir}/docs
  install -Dm644 preamble.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/preamble.txt"
  install -Dm644 licence.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licence.txt"
  install -Dm644 licendoc.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licendoc.txt"
  install -Dm644 lgpl.txt     "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/lgpl.txt"
  install -Dm644 gpl.txt      "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/gpl.txt"
  install -Dm644 xserver.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/xserver.txt"
}

_package_wxmsw_no28() {
  pkgdesc="A C++ library that lets developers create applications for Windows, Linux and UNIX without 2.8 compatible support(mingw-w64)"
  groups=("${MINGW_PACKAGE_PREFIX}-wxWidgets")
  conflicts=("${MINGW_PACKAGE_PREFIX}-wxWidgets" "${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}")
  provides=("${MINGW_PACKAGE_PREFIX}-wxWidgets" "${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}")
  depends=(
    "${MINGW_PACKAGE_PREFIX}-gcc-libs"
    "${MINGW_PACKAGE_PREFIX}-expat"
    "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
    "${MINGW_PACKAGE_PREFIX}-libpng"
    "${MINGW_PACKAGE_PREFIX}-libtiff"
    "${MINGW_PACKAGE_PREFIX}-xz"
    "${MINGW_PACKAGE_PREFIX}-zlib"
  )

  mkdir -p ${pkgdir}${MINGW_PREFIX}
  cp --recursive "${srcdir}"/install-no28-${CARCH}-static/${MINGW_PREFIX}/ ${pkgdir}/
  cp --recursive "${srcdir}"/install-no28-${CARCH}/${MINGW_PREFIX}/ ${pkgdir}/

  mv ${pkgdir}${MINGW_PREFIX}/lib/*.dll ${pkgdir}${MINGW_PREFIX}/bin

  # Add missing exe file extension (Likely bug in wxWidgets makefile)
  mv ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever} ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever}.exe

  # create wx-config copy with version file suffix
  cp ${pkgdir}${MINGW_PREFIX}/bin/wx-config{,-${_wx_basever}}

  # Remove files
  rm -fr ${pkgdir}${MINGW_PREFIX}/bin/wx-config

  # License files
  cd "${srcdir}"/${_sourcedir}/docs
  install -Dm644 preamble.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/preamble.txt"
  install -Dm644 licence.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licence.txt"
  install -Dm644 licendoc.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licendoc.txt"
  install -Dm644 lgpl.txt     "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/lgpl.txt"
  install -Dm644 gpl.txt      "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/gpl.txt"
  install -Dm644 xserver.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/xserver.txt"
}

_package_wxmsw_ANSI() {
  pkgdesc="A C++ library that lets developers create applications for Windows, Linux and UNIX without Unicode support(mingw-w64)"
  conflicts=("${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}")
  provides=("${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}")
  depends=(
    "${MINGW_PACKAGE_PREFIX}-gcc-libs"
    "${MINGW_PACKAGE_PREFIX}-expat"
    "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
    "${MINGW_PACKAGE_PREFIX}-libpng"
    "${MINGW_PACKAGE_PREFIX}-libtiff"
    "${MINGW_PACKAGE_PREFIX}-xz"
    "${MINGW_PACKAGE_PREFIX}-zlib"
  )

  mkdir -p ${pkgdir}${MINGW_PREFIX}
  cp --recursive "${srcdir}"/install-msw-${CARCH}-ANSI-static/${MINGW_PREFIX}/ ${pkgdir}/
  cp --recursive "${srcdir}"/install-msw-${CARCH}-ANSI/${MINGW_PREFIX}/ ${pkgdir}/

  mv ${pkgdir}${MINGW_PREFIX}/lib/*.dll ${pkgdir}${MINGW_PREFIX}/bin

  # Add missing exe file extension (Likely bug in wxWidgets makefile)
  mv ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever} ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever}.exe

  # create wx-config copy with version file suffix
  cp ${pkgdir}${MINGW_PREFIX}/bin/wx-config{,-${_wx_basever}}

  # Remove files
  rm -fr ${pkgdir}${MINGW_PREFIX}/bin/wx-config

  # License files
  cd "${srcdir}"/${_sourcedir}/docs
  install -Dm644 preamble.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/preamble.txt"
  install -Dm644 licence.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licence.txt"
  install -Dm644 licendoc.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licendoc.txt"
  install -Dm644 lgpl.txt     "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/lgpl.txt"
  install -Dm644 gpl.txt      "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/gpl.txt"
  install -Dm644 xserver.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/xserver.txt"
}

_package_wxgtk3() {
  pkgdesc="GTK+ implementation of wxWidgets API for GUI (mingw-w64)"
  conflicts=("${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}")
  provides=("${MINGW_PACKAGE_PREFIX}-wxWidgets${_wx_basever}")
  depends=(
    "${MINGW_PACKAGE_PREFIX}-gtk3"
    "${MINGW_PACKAGE_PREFIX}-gdk-pixbuf2"
    "${MINGW_PACKAGE_PREFIX}-gstreamer"
    "${MINGW_PACKAGE_PREFIX}-gcc-libs"
    "${MINGW_PACKAGE_PREFIX}-expat"
    "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
    "${MINGW_PACKAGE_PREFIX}-libpng"
    "${MINGW_PACKAGE_PREFIX}-libtiff"
    "${MINGW_PACKAGE_PREFIX}-xz"
    "${MINGW_PACKAGE_PREFIX}-zlib"
  )
  local MINGW_PREFIX_WIN=$(cygpath -am ${MINGW_PREFIX})

  mkdir -p ${pkgdir}
  cp --recursive "${srcdir}"/install-gtk3-${CARCH}-static/${MINGW_PREFIX}/ ${pkgdir}/
  cp --recursive "${srcdir}"/install-gtk3-${CARCH}/${MINGW_PREFIX}/ ${pkgdir}/

  # Copy files missing from wxGTK install; not sure if all these files are needed by wxGTK/win
  cp ${srcdir}/${_sourcedir}/include/wx/msw/wx.rc      ${pkgdir}${MINGW_PREFIX}/include/wx-${_wx_basever}/wx/msw/wx.rc
  cp ${srcdir}/${_sourcedir}/include/wx/msw/rcdefs.h   ${pkgdir}${MINGW_PREFIX}/include/wx-${_wx_basever}/wx/msw/rcdefs.h
  cp ${srcdir}/${_sourcedir}/include/wx/msw/*.cur      ${pkgdir}${MINGW_PREFIX}/include/wx-${_wx_basever}/wx/msw/
  cp ${srcdir}/${_sourcedir}/include/wx/msw/*.ico      ${pkgdir}${MINGW_PREFIX}/include/wx-${_wx_basever}/wx/msw/
  cp ${srcdir}/${_sourcedir}/include/wx/msw/*.bmp      ${pkgdir}${MINGW_PREFIX}/include/wx-${_wx_basever}/wx/msw/
  cp ${srcdir}/${_sourcedir}/include/wx/msw/*.manifest ${pkgdir}${MINGW_PREFIX}/include/wx-${_wx_basever}/wx/msw/

  # Need to create patch for wxWidgets to add "wx/msw/init.h" to wxGTK/win build
  cp ${srcdir}/${_sourcedir}/include/wx/msw/init.h   ${pkgdir}${MINGW_PREFIX}/include/wx-${_wx_basever}/wx/msw/init.h

  sed -s "s|-L${MINGW_PREFIX_WIN}/lib||g" -i "${pkgdir}"${MINGW_PREFIX}/lib/wx/config/gtk3-unicode-${_wx_basever}
  sed -s "s|-L${MINGW_PREFIX_WIN}/lib||g" -i "${pkgdir}"${MINGW_PREFIX}/lib/wx/config/gtk3-unicode-static-${_wx_basever}

  mv ${pkgdir}${MINGW_PREFIX}/lib/*.dll ${pkgdir}${MINGW_PREFIX}/bin

  # Add missing exe file extension (Likely bug in wxWidgets makefile)
  mv ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever} ${pkgdir}${MINGW_PREFIX}/bin/wxrc-${_wx_basever}.exe

  # create wx-config copy with version file suffix
  cp ${pkgdir}${MINGW_PREFIX}/bin/wx-config{,-${_wx_basever}}

  # Remove files
  rm -fr ${pkgdir}${MINGW_PREFIX}/bin/wx-config

  # License files
  cd "${srcdir}"/${_sourcedir}/docs
  install -Dm644 preamble.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/preamble.txt"
  install -Dm644 licence.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licence.txt"
  install -Dm644 licendoc.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/licendoc.txt"
  install -Dm644 lgpl.txt     "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/lgpl.txt"
  install -Dm644 gpl.txt      "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/gpl.txt"
  install -Dm644 xserver.txt  "${pkgdir}${MINGW_PREFIX}/share/licenses/${_basename}${_wx_basever}/xserver.txt"
}

package_mingw-w64-i686-wxconfig-git() { _package_wxconfig; }
package_mingw-w64-i686-wxgtk3.0-gtk3-git() { _package_wxgtk3; }
package_mingw-w64-i686-wxmsw3.0-git() { _package_wxmsw; }
package_mingw-w64-i686-wxmsw3.0-no28-git() { _package_wxmsw_no28; }
package_mingw-w64-i686-wxmsw3.0-ANSI-git() { _package_wxmsw_ANSI; }

package_mingw-w64-x86_64-wxconfig-git() { _package_wxconfig; }
package_mingw-w64-x86_64-wxgtk3.0-gtk3-git() { _package_wxgtk3; }
package_mingw-w64-x86_64-wxmsw3.0-git() { _package_wxmsw; }
package_mingw-w64-x86_64-wxmsw3.0-no28-git() { _package_wxmsw_no28; }
package_mingw-w64-x86_64-wxmsw3.0-ANSI-git() { _package_wxmsw_ANSI; }

package_mingw-w64-ucrt-x86_64-wxconfig-git() { _package_wxconfig; }
package_mingw-w64-ucrt-x86_64-wxgtk3.0-gtk3-git() { _package_wxgtk3; }
package_mingw-w64-ucrt-x86_64-wxmsw3.0-git() { _package_wxmsw; }
package_mingw-w64-ucrt-x86_64-wxmsw3.0-no28-git() { _package_wxmsw_no28; }
package_mingw-w64-ucrt-x86_64-wxmsw3.0-ANSI-git() { _package_wxmsw_ANSI; }

package_mingw-w64-clang-i686-wxconfig-git() { _package_wxconfig; }
package_mingw-w64-clang-i686-wxgtk3.0-gtk3-git() { _package_wxgtk3; }
package_mingw-w64-clang-i686-wxmsw3.0-git() { _package_wxmsw; }
package_mingw-w64-clang-i686-wxmsw3.0-no28-git() { _package_wxmsw_no28; }
package_mingw-w64-clang-i686-wxmsw3.0-ANSI-git() { _package_wxmsw_ANSI; }

package_mingw-w64-clang-x86_64-wxconfig-git() { _package_wxconfig; }
package_mingw-w64-clang-x86_64-wxgtk3.0-gtk3-git() { _package_wxgtk3; }
package_mingw-w64-clang-x86_64-wxmsw3.0-git() { _package_wxmsw; }
package_mingw-w64-clang-x86_64-wxmsw3.0-no28-git() { _package_wxmsw_no28; }
package_mingw-w64-clang-x86_64-wxmsw3.0-ANSI-git() { _package_wxmsw_ANSI; }
